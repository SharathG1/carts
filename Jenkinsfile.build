@Library('dynatrace@master') _
@Library('keptn-library@6.0.0')
def keptn = new sh.keptn.Keptn()


pipeline {
  agent {
    label 'master'
  }
  
  
	parameters{
         string(defaultValue: 'dev', description: 'Stage of your Keptn project where tests are triggered in', name: 'stage', trim: false) 
         //string(defaultValue: '', description: 'Keptn Context ID', name: 'shkeptncontext', trim: false) 
         //string(defaultValue: '', description: 'Triggered ID', name: 'triggeredid', trim: false) 
	}
  
  environment {
    APP_NAME = "carts"
    VERSION = readFile('version').trim()
    ARTEFACT_ID = "sockshop/" + "${env.APP_NAME}"
    CLASS = "GOLD"
  }
  stage('Initialize Keptn') {
	      keptn.downloadFile("https://raw.githubusercontent.com/SharathG1/carts/master/keptn/shipyard.yml", 'keptn/shipyard.yaml')
              //keptn.downloadFile("https://github.com/SharathG1/podtato-head1/blob/main/delivery/keptn/prometheus/sli.yaml", 'keptn/dynatrace/dynatrace.conf.yaml')
              keptn.downloadFile("https://raw.githubusercontent.com/SharathG1/carts/master/keptn/sli.yml", 'keptn/sli.yaml')
              keptn.downloadFile("https://raw.githubusercontent.com/SharathG1/carts/master/keptn/slo.yml", 'keptn/slo.yaml')
              archiveArtifacts artifacts:'keptn/**/*.*'
                      // Initialize the Keptn Project - ensures the Keptn Project is created with the passed shipyard
	      keptn.keptnInit project:"${params.Project}", service:"${params.Service}", stage:"${params.Stage}", shipyard:'keptn/shipyard.yaml'
	      keptn.keptnConfigureMonitoring monitoring:"prometheus"
		 // Upload all the files
		//keptn.keptnAddResources('keptn/dynatrace/dynatrace.conf.yaml',)
	      keptn.keptnAddResources('keptn/sli.yaml','sli.yaml')
	      keptn.keptnAddResources('keptn/slo.yaml','slo.yaml')
	    }
    }	  
   stage('Trigger keptn Delivery Sequence') {
        // Send test.finished Event back
	   steps{
		   script{
        //def keptnContext = keptn.sendFinishedEvent eventType: "deployment", keptnContext: "${params.shkeptncontext}", triggeredId: "${params.triggeredid}", result:"pass", status:"succeeded", message:"jenkins tests succeeded"
        def keptnContext = keptn.sendDeliveryTriggeredEvent project: "sockshop", service: "carts", image:"${env.TAG_DEV}"
	      String keptn_bridge = env.KEPTN_BRIDGE
        echo "Open Keptns Bridge: ${keptn_bridge}/trace/${keptnContext}"
		   }
     }
   }
 }
}
